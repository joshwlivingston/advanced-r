---
title: Advanced R Chapter 3 - Vectors
---

[Book Link](https://adv-r.hadley.nz/vectors-chap.html#vectors-chap)

- Vectors, an important R data type, have two types: *atomic vectors* and *lists* (generic vectors)
- Vectors also have metadata in the form of *attributes*

## 3.2: Atomic Vectors

### Notes

- Four primary types of atomic vectors
  - logical
  - character
  - double
  - integer
    - Together, double and integer are numeric vectors
- Two rare types:
  - complex
  - raw
<br><br>
  
#### Scalars

Scalars, aka individual values, are created in special ways for each of the four primary types:

| Type      | Value                                                         |
|:----------|:--------------------------------------------------------------|
| Logical   | `TRUE` or `FALSE` (or `T` or `F`)                             |
| Character | surrounded by `"` or `'`. see `?Quotes` for escape characters |
| Double    | decimal (`0.123`), scientific (`1.23e3`), or hexadecimal form |
| Integer   | similar to doubles, ending with `L` (`123L`)                  |

* There are three special values unique to doubles: `Inf`, `-Inf`, and `NaN` (not a number)
<br><br>

#### c()

- `c()`, short for combine, is used to create longer vectors
- Determine the vector type with `typeof()`
- If the inputs to `c()` are other atomic vectors, R will flatten them into one atomic vector.
```{r}
x1 <- c(1, 2)
x2 <- c(3, 4)
c(x1, x2)
```
<br>

#### Missing values

- Missing values are represented with `NA`
  - Each primary type has its own missing value (R usually converts to correct type)
  
| Type      | Missing Value  |
|:----------|:---------------|
| Logical   | `NA`           |
| Character | `NA_character` |
| Double    | `NA_real_`     |
| Integer   | `NA_integer_`  |

- Most computations involving missing values will return a missing value, with a few exceptions:

The 0 power identity
```{r}
NA ^ 0
```
<br>

Boolean logic (or TRUE):
```{r}
NA | TRUE
```
<br>

Boolean logic (and FALSE):
```{r}
NA & FALSE
```
<br>

- Use `is.na()` to check for missingness in vectors
```{r}
x <- c(NA, 2, 3, NA)
is.na(x)
```
<br>

#### Testing

The primary types can be checked with the appropriate `is.*()` function:

| Type      | `is.*()` function |
|:----------|:------------------|
| Logical   | `is.logical()`    |
| Character | `is.character()`  |
| Double    | `is.double()`     |
| Integer   | `is.integer()`    |
<br>

#### Coercion

Coercion to a different type often happens automatically as a result of a computation. To deliberately coerce, use the appropriate `as.*()` function:

| Type      | `as.*()` function |
|:----------|:------------------|
| Logical   | `as.logical()`    |
| Character | `as.character()`  |
| Double    | `as.double()`     |
| Integer   | `as.integer()`    |

Failed coercion generates a warning and returns `NA` for that value.

```{r}
as.integer(c("1", "2.5", "bike", "7"))
```

Per `?c`, the hierarchy of types when coercing is NULL < raw < logical < integer < double < complex < character < list < expression
<br><br>

### Exercises

*1. How do you create raw and complex scalars? (See `?raw` and `?complex`.)*

Raw vectors are created with `raw()`, specifying the single `length` argument. Raw vectors also have a specific `is.raw()` for checking and `as.raw()` for coercion.
```{r}
r <- raw(2)
r
```
<br>

Complex vectors are created with `complex()`, specifying either the length (via the `length.out` argument) or both the real and imaginary parts as numeric vectors.
<br><br>

*2. Test your knowledge of the vector coercion rules by predicting the output of the following uses of `c()`*

Per the type coercion hierarchy, `c(1, FALSE)` will be converted to a double, `c(1, 0)`. 1's are coerced to `TRUE` (and 0 to `FALSE`), and vice versa
```{r}
x <- c(1, FALSE)
cat(x, "\n", typeof(x))
```
<br>

`c("a", 1)`, will be coerced to `c("a", "1")` as the character type is about double in the type coversion hierarchy
```{r}
x <- c("a", 1)
cat(x, "\n", typeof(x))
```
<br>

`c(TRUE, 1L)`, will b coerced to `c(1L, 1L)` per the type coercion hierarchy
```{r}
x <- c(TRUE, 1L)
cat(x, "\n", typeof(x))
```
<br>

*3.1. Why is `1 == "1"` true?*

Per the documentation for `==`, atomic vectors that are of different types are coerced prior to evaluation. So, the left hand of the equality, `1`, will be coerced to a character vector prior to evaluation. Once coerced, the call is `"1" == "1"`, which is clearly true.

*3.2. Why is `-1 < FALSE` true?*

`<`, like `==`, also coerces types prior to evaluation. So after coercion, the call here becomes `-1 < 0`, which is true.

*3.3. Why is `"one" < 2` false?*

Per the documentation for `<`, string comparison is done at the locale level. The locale in use can be viewed with `Sys.getlocale()` and similarly set with `Sys.setlocale()`. Because numbers come before letters in this sequence, the coerced inequality, `"one" < "2"` is evaluated as `FALSE`.
<br><br>

*4. Why is the default missing value, `NA`, a logical vector? What’s special about logical vectors? (Hint: think about `c(FALSE, NA_character_)`.)*

Logical vectors are lowest on the type hierarchy. When they are combined with another primary type, logicals will always be coerced into the other type.
<br><br>

*5. Precisely what do `is.atomic()`, `is.numeric()`, and `is.vector()` test for?*

- `is.atomic()` checks if an object is of type "logical", "integer", "numeric", "complex", "character" or "raw"
- `is.numeric()` checks if an object is a double or integer vector and *not* a factor.
- `is.vector()` is a generalized `is.*()` function for all vectors. The `mode` argument can be specified to check for a specific type, including lists. It can also be left as "any", the default, to check is the object is a vector. `mode` can also be specified as "numeric", running the same check as `is.numeric()`.
<br><br>

## 3.3: Attributes

### Notes

#### Getting and setting

- Attributes are name-value pairs that attach metadata to an R object
- Individual attributes can be get and set with `attr()`
- Attributes are retrieved en masse with `attributes()` and set with `structure()`
- Most attributes, other than **dim** and **names** are lost by most operations
  - To define and preserve attributes, create an S3 class, discussed in Chapter 13
<br><br>
  
#### Names

- Names can be set in three ways:
```{r}
# When creating it: 
x <- c(a = 1, b = 2, c = 3)

# By assigning a character vector to names()
x <- 1:3
names(x) <- c("a", "b", "c")

# Inline, with setNames():
x <- setNames(1:3, c("a", "b", "c"))
```
<br>

- Names should be unique and non-missing, though this is not enforced in R
<br><br>

#### Dimensions

- Adding the **dim** attribute allows a vector to behave like a 2-d **matrix** or multi-dimensional **array**
  - You can also create matrices and arrays with `matrix()` and `array()`
- If a vector has no `dim` attribute set, that is equivalent to a vector with `NULL` dimensions
- Many functions for working with vectors have generalizations for working with matrices and arrays
<br><br>

### Exercises

*1. How is `setNames()` implemented? How is `unname()` implemented? Read the source code.*

`setNames()` assigns names to the object by calling `names()<-`
```{r}
setNames
```
<br>

`unname()` sets names to `NULL` using `names()<-`. If the object is a data frame, or `force` is set to `TRUE`, the dimension names are set to `NULL` using `dimnames()<-`
```{r}
unname
```
<br>

*2.1 What does dim() return when applied to a 1-dimensional vector?*

The dimensions of a 1-d vector are `NULL`, so `dim()` returns `NULL`.
```{r}
x <- c(1, 2, 3)
dim(x)
```
<br>

*2.2 When might you use NROW() or NCOL()?*

The difference between `NROW()` and `nrow()` (and `NCOL()` and `ncol()`) is that the capitalized forms return values for one dimensional vectors. Both functions return the same value for matrices, arrays, and data frames.

For one dimensional objects:
- `NROW()` returns the length of the vector
- `NCOL()` returns `1L`
<br>><br>

*3. How would you describe the following three objects? What makes them different from `1:5`?*
```{r}
x1 <- array(1:5, c(1, 1, 5))
x2 <- array(1:5, c(1, 5, 1))
x3 <- array(1:5, c(5, 1, 1))
```
<br>

`x1`, `x2`, and `x3` are all one dimensional arrays in a 3 dimensional space. Each has a numeric vector of length 3 as the `dim` attribute. `1:5`, being a 1 dimensional vector, does not have a `dim` attribute.
```{r}
dim(1:5)
```
<br>

*4. An early draft used this code to illustrate `structure()`:*
```{r}
structure(1:5, comment = "my attribute")
```
<br>

*But when you print that object you don’t see the comment attribute. Why? Is the attribute missing, or is there something else special about it? (Hint: try using help.)*

Checking the documentation for the default method for `print()`,  (`?print.default`), we see that attributes are printed depending on an object's class(es).

`1:5` is stored as an "integer"
```{r}
class(1:5)
```
<br>

Since there is no `print` method defined for "integer", `print.default()` will be used and no attributes printed.

If we wanted the attribute `comment` to be printed with the output, we would have to create an S3 class with and attribute `comment` and define a `print` method for that class that includes the `comment` attribute.
<br><br>

## 3.4: S3 atomic vectors

### Notes

Discussed more in Chapter 13, S3 objects have a `class` attribute, which means it will have special behavior for generic functions.

There are four important S3 vectors in base R:

- Categorical data in **factor** vectors, an integer
- Dates in **Date** vectors, a double
- Date-times in **POSIXct** vectors, a double
- Durations in **difftime** vectors, a double
<br><br>

#### Factors

Factors are useful when looking at categorical data. They sit on top of integers with two attributes:

- `class`: "factor"
- `levels`: defines factor's categories

Ordered factors are just like factors, except that the order of the factors is meaningful
<br><br>

#### Dates

Dates are built on double vectors with a `class` attribute "Date".

The value of the double represents the number of days since 1970-01-01.

```{r}
d <- as.Date("1971-01-01")
unclass(d)
```
<br>

#### Date-times
R stores date-time data in two ways, POSIXct, and POSIXlt. POSIX stands for Portable Operating System Interface, ct for calendar time, and lt for local time. POSIXct is the simplest usage.

POSIXct variables are built on top of double variables, with two attributes: 

- `class`: "POSIXct"
- `tzone`: "UTC", "GMT", "" for local, or a [timezone name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)

The `tzone` attributes controls the timezone, and can be modified using `attr()` or `structure()`. See [this Wikipedia page](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for a list of the timezone names and `?timezones` for where to locate the tz database on your system.
<br><br>

#### Durations

Durations, representing the time between two dates or date-times, are stored in **difftimes**.

Difftimes are built on doubles with a `units` attribute that determines how the duration should be calculated.
<br><br>

### Exercises

*1. What sort of object does `table()` return? What is its type? What attributes does it have? How does the dimensional change as you tabulate more variables?*

From viewing its structure with `str()`, we see that `t` is a built on an integer, appearing to be a 1-dimensional array. It has an additional attribute `dimnames` containing the factor levels.
```{r}
x <- c("cat", "dog", "dog")
f <- factor(x, levels = c("cat", "dog", "horse"))
t <- table(f)
str(t)
```
<br>

Looking at `dim(t)` we confirm that this is a 1 dimensional array.
```{r}
dim(t)
```
<br>

`attributes()` also provides a clean look at `t`
```{r}
attributes(t)
```
<br>

For each variable added to the tabulation, the dimensionality increases by 1. Here with two variables, we note that `t2` is a two dimensional array.
```{r}
y <- c("female", "male", "female")
g <- factor(y)
t2 <- table(f, g)
attributes(t2)
```
<br>

And `t3`, with three tabulated variables, is a three dimensional array.
```{r}
z <- c("black", "black", "brown")
h <- factor(z)
t3 <- table(f, g, h)
attributes(t3)
```
<br>

*2. What happens to a factor when you modify its levels?*

Using `tracemem()`, we see that this is considered a modification, so copy-on-modify takes place.
```{r}
f1 <- factor(letters)
tracemem(f1)
levels(f1) <- rev(levels(f1))
```
<br>

*3. What does this code do? How do `f2` and `f3` differ from `f1`?*
```{r}
f2 <- rev(factor(letters))
f3 <- factor(letters, levels = rev(letters))
```
<br>

The key difference here is the order of the levels in each output. Since `rev()` reverses the vector's values, not the values the `levels` attributes the levels for `f2`, are in alphabetical order:
```{r}
levels(f2)[1:5]
```
<br>

For `f3`, the levels are in reverse alphabetical order, as `rev()` was called on the levels themselves when it was created.
```{r}
levels(f3)[1:5]
```
<br><br>

## 3.5: Lists

### Notes

#### Creating

Lists can be created using `list()`.

- Lists contain references to other objects 
- A list's those objects can be of any type, including other lists
- Because a list can contain another list, lists are sometimes called **recursive** vectors
- `c()` combines multiple lists into one. If some of the inputs to `c()` are atomic vectors and others lists, R will coerce the vectors to lists prior to combining
<br><br>

#### Testing and coercion

- `typeof()` returns "list" for lists
- Check if a list with `is.list()` and coerce to a list with `as.list()`
- You can also coerce a list to an atomic vector with `unlist()`
  - From the book, The rules for the type resulting from `unlist()` are *"complex, not well documented, and not always equivalent to what you’d get with `c()`"*
<br><br>

#### Matrices and arrays

Similarly to atomic vectors, you *can* add a `dim` attribute to lists to create list-matrices or list-arrays, if you want to.
<br><br>

### Exercises

*1. List all the ways that a list differs from an atomic vector.*

- Because a list contains references, the list's elements can be of any type
- A list stores references to other objects in memory, while a vector only stores one object in memory

Here, the vector is seen occupying one location in memory
```{r}
library(lobstr)
x <- letters
ref(x)
```
<br>

While the list occupies several locations. Note also that `x` and `letters` are references to the same object in memory
```{r}
l <- list(x, LETTERS, letters)
ref(l)
```
<br>

*2. Why do you need to use `unlist()` to convert a list to an atomic vector? Why doesn’t `as.vector()` work?*

Since lists are types of vectors, the list itself will be returned when passed to `as.vector()`. This is confirmed per the documentation at `?as.vector`.
<br><br>

*3. Compare and contrast `c()` and `unlist()` when combining a date and date-time into a single vector.*
```{r}
d <- Sys.Date()
dt <- Sys.time()
```

- `c()` coerces into a Date or POSIXct variable, whichever is called first.

Date first:
```{r}
x1 <- c(d, dt)
str(x1)
```
<br>

POSIXct first:
```{r}
x2 <- c(dt, d)
str(x2)
```
<br>

- `unlist()` takes a list and returns the atomic components only, so it coerces both elements into a double and returns the resulting atomic vector.
```{r}
y <- unlist(list(d, dt))
str(y)
```
<br><br>

## 3.6: Data frames and tibbles

### Notes

Data frames and tibbles are two important S3 vectors built on lists

- Data frames are a named list of vectors with three attributes:
  - `names` for column names
  - `row.names` for row names
  - `class`, "data.frame"
- Unlike regular lists, data frames have a requirement that all vector elements have the same `NROW()`
  - Most of the time, this is equivalent to saying all columns must have the same length. However, as we'll see later, data frames can be columns, so stating the requirement in terms of `NROW()` is necessary to accommodate these cases.
  - Gives data frames the same properties as matrices
  
- Tibbles are a modern "equivalent" to a data.frame, provided by the `tibble` package.
```{r}
library(tibble)
t <- tibble()
attributes(t)
```
<br>

#### Creating

- `data.frame()` to create data frames
- `tibble::tibble()` to create tibbles

Differences in creation between tibbles and data frames:

- Tibbles never coerce vectors
  - A common need is to suppress string to factor coercion in `data.frame()` by setting `stringsAsFactors` to `FALSE`
- Tibbles surround non-syntactic names with `` ` `` rather than transforming them
- Data frames recycle inputs that are an integer multiple of the longest vector, while tibbles only recycle vectors that are of length 1
- Tibbles allow you to refer to created variables during construction
<br><br>

#### Row names

A character vector can be supplied to label the "rows" of a data frame, in two ways:

- The `row.names` argument in `data.frame()`
- By calling `rownames()`

Tibbles do not support row names for three main reasons
- Row names are stored differently from data
- They only work when rows can be identified via a single string
- They *must* be unique, so repetition/resampling results in new row names

Row names can be converted to a column in a tibble using `rownames_to_column()` or the `rownames` argument in `as_tibble()`
<br><br>

#### Printing

Four main differences between the `print()` output for a data frames and for tibbles:

- Tibbles show the first 10 rows and all columns that fit on screen
- Columns are labelled with its abbreviated type
- Wide columns are truncated
- Color is used when supported to (de)emphasize information
<br><br>

#### Subsetting

Discussed more in Chapter 4, you can subset data frames and tibbles like a 1-D list or a 2-D matrix.

Tibbles modify two undesirable properties of data frames:

- Data frames will return a vector for `df[, x]` if x is a length one vector, and a data frame if x is of length > 1, unless you specify `df[, x, drop = FALSE]`
  - Tibbles always return another tibble when using `[`
  - Subsetting a single column from a tibble using `[`, however, can cause an issue with some legacy code that expects an atomic vector when calling `df[, "col"]`. Use `df[["col"]]` to unambiguously return the desired column as an atomic vector whether subsetting a data frame or tibble
```{r}
df1 <- data.frame(xyz = "a")
df2 <- tibble(xyz = "a")
x <- "xyz"
df1[, x]
df1[, x, drop = FALSE]
df2[, x]
```
<br>

- When using `$` data frames will return any variable that starts with the input
```{r}
str(df1$x)
```
<br>

Tibbles only return exact matches with `$`
```{r}
str(df2$x)
```
<br>

#### Testing and coercing

- Check with `is.data.frame()` or `is_tibble()`
- Coerce with `as.data.frame()` or `as_tibble()`
<br><br>

#### List columns

Since data frames are lists of vectors, a data frame can have a column as a list.

Adding a list column involves an extra step in data frames:
```{r}
# Either after the data frame is created
d <- data.frame(a = 1:3)
d$b <- list(4:6)
```
<br>

Lists are fully supported in tibbles
```{r}
d <- tibble(
  a = 1:3,
  b = list(4:6)
)
```
<br>

#### Matrix and data frame columns

Extending the length requirement for data frames (that all columns must be of the same length), it's actually the `NROW()` of each column that needs to match. Because of this, data frames and matrices can be included as columns in a data frame.

Just as with list columns, it must be added after creation or wrapped in `I()`. Note that wrapping it in `I()` adds a `class` "AsIs"
```{r}
d0 <- data.frame(a = 1:3, b = 4:6)
d <- data.frame(x = -2:0, y = I(d0))
str(d)
```
<br>

Many functions that work with columns assume that all columns are vectors, so use with caution.
<br><br>

### Exercises

*1. Can you have a data frame with zero rows? What about zero columns?*

You can create an empty data frame with zero rows and zero columns.
```{r}
d <- data.frame()
str(d)
```
<br>

You can add an empty row, but its value is inaccessible
```{r}
d[1, ] <- 1L
d[1, ]
```
<br>

Same outcome for row without a column in a tibble
```{r}
d <- tibble()
d[1, ] <- 1L
d[1, ]
```
<br>

You can add an empty columns during or after creation
```{r}
d <- data.frame(x = character())
d$y <- vector("list")
str(d)
```
<br>

*2. What happens if you attempt to set rownames that are not unique?*

R will throw an error
```{r, eval=FALSE}
data.frame(a = 1:3, row.names = rep("x", 3))
```

```{r, echo=FALSE}
tryCatch(
  data.frame(a = 1:3, row.names = rep("x", 3)), 
  error = function(e) {
    msg <- paste0("Error in data.frame(a = 1:3, row.names = rep(\"x\", 3)) :\n  ", e$message)
    print(writeLines(msg))
  }
)
```
<br>

*3. If `df` is a data frame, what can you say about `t(df)`, and `t(t(df))`? Perform some experiments, making sure to try different column types.*

If `df` can behave like a matrix, `t()` will operate as expected
```{r}
d <- data.frame(a = 1:2, b = 3:4)
t(d)
t(t(d))
```
<br>

Prior to transposing, `t()` coerces `df` to a matrix. Non-atomic vectors are coerced by `as.vector()`. For lists, `as.vector()` returns the list, so transposition occurs at the list-element level.

Looking at the matrix object created as a first step, we see that the matrix preserved all variable types when coercing a list column into a matrix column. Remember that matrices are two dimensional vectors
```{r}
d <- data.frame(a = 1:3, b = I(list("4", 5, 6L)))
str(as.matrix(d))
```
<br>

So `t()` works as "expected" with list columns
```{r}
t(d)
t(t(d))
```
<br>

For data frame columns, `as.matrix()` will combine the data frame columns (and any nested data frame columns) with the containing data frame.
```{r}
d <- data.frame(a = 1:3, b = 4:6)
d$c <- data.frame(x = 101:103, y = 104:106)
d0 <- data.frame(z = 1001:1003)
d0$zz <- data.frame(z0 = 1:3, z1 = 4:6)
d$d <- d0
as.matrix(d)
```
<br>

`t()` works with data frame columns normally after combining
```{r}
t(d)
t(t(d))
```
<br>

*4. What does `as.matrix()` do when applied to a data frame with columns of different types? How does it differ from `data.matrix()`?*

The behavior for `as.matrix()` is described in answer 3.

`data.matrix()` converts all variables in a data frame to numeric via `as.numeric()` prior to combining them, so I would expect odd behavior when converting non numeric variable types

Logical and factor columns are coerced to integers. Character columns are converted first to factors, then to integers
```{r}
a <- letters[1:3]
as.integer(as.factor(a))
```
<br>

So `data.matrix()` will use the resulting integer column for the resulting matrix
```{r}
b <- c(TRUE, TRUE, FALSE)
c <- factor(LETTERS[1:3])
d <- data.frame(a, b, c)
data.matrix(d)
```
<br>

Any non numeric column that is *not* a logical, factor, or character column is converted to a numeric column via `as.numeric()`. `as.numeric()` only works on atomic vectors, so it will convert each list element at the atomic level
```{r}
b <- list(a = 1, b = "2", c = 3L)
d <- data.frame(b = b)
data.matrix(d)
```
<br>

Similar application for data frames, being lists themselves
```{r}
c <- data.frame(c1 = 4:6, c2 = 7:9)
d <- data.frame(a = 1:3, c = c)
data.matrix(d)
```
<br><br>

## 3.7: NULL

### Notes

- `NULL` is a data structure with a unique type, "NULL"
```{r}
typeof(NULL)
```
<br>

- `NULL` is always length zero
```{r}
length(NULL)
```
<br>

- `NULL` cannot have any attributes
```{r, eval=FALSE}
x <- NULL
attr(x, a) <- 1L
```

```{r, echo=FALSE}
tryCatch(
  {
    x <- NULL
    attr(x, a) <- 1L
  }, 
  error = function(e) {
    msg <- paste0("Error in attr(x, a) <- 1L : ", e$message)
    print(writeLines(msg))
  }
)
```

<br>

Two common uses of `NULL`:

- To represent an empty vector
- To represent an absent vector
  - `NULL` is often used as a default function value, to signify that that value is not needed in the function.
  - `NA`, in contrast, signifies that the element of a vector is absent, not the vector itself
<br><br>
